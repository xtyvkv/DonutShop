{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\15862\\\\source\\\\repos\\\\DonutShop\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HttpErrorResponse } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DonutShopService {\n  constructor(httpClient, newBaseUrl) {\n    this.httpClient = httpClient;\n    this.aspBaseUrl = \"\";\n    this.donutApiUrl = \"https://grandcircusco.github.io/demo-apis/donuts.json\";\n    this.aspBaseUrl = newBaseUrl;\n  }\n\n  getDonutList() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let callResult = null;\n\n      try {\n        callResult = yield _this.httpClient.get(_this.donutApiUrl).toPromise();\n        console.log('Service received ' + callResult.count.toString() + 'donuts.');\n      } catch (unexpectedException) {\n        callResult = [];\n        callResult.results = [];\n\n        if (unexpectedException instanceof HttpErrorResponse) {\n          let unexpectedExceptionHttp = unexpectedException;\n          console.log('Error sending http request ' + _this.donutApiUrl + ': ' + unexpectedExceptionHttp.message);\n        }\n      }\n\n      return callResult.results;\n    })();\n  }\n\n}\n\nDonutShopService.ɵfac = function DonutShopService_Factory(t) {\n  return new (t || DonutShopService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\n\nDonutShopService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DonutShopService,\n  factory: DonutShopService.ɵfac,\n  providedIn: 'root'\n});\nexport class Donut {\n  constructor() {\n    this.id = 0;\n    this.ref = \"\";\n    this.name = \"\";\n    this.photo = \"\";\n    this.photo_attribution = \"\";\n  }\n\n}\nexport class DonutApiResponse {\n  constructor() {\n    this.count = 0;\n    this.result = [];\n  }\n\n}","map":{"version":3,"sources":["C:/Users/15862/source/repos/DonutShop/ClientApp/src/app/donut-shop.service.ts"],"names":["HttpErrorResponse","i0","i1","DonutShopService","constructor","httpClient","newBaseUrl","aspBaseUrl","donutApiUrl","getDonutList","callResult","get","toPromise","console","log","count","toString","unexpectedException","results","unexpectedExceptionHttp","message","ɵfac","DonutShopService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","Donut","id","ref","name","photo","photo_attribution","DonutApiResponse","result"],"mappings":";AAAA,SAASA,iBAAT,QAAkC,sBAAlC;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,gBAAN,CAAuB;AAC1BC,EAAAA,WAAW,CAACC,UAAD,EAAaC,UAAb,EAAyB;AAChC,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKE,UAAL,GAAkB,EAAlB;AACA,SAAKC,WAAL,GAAmB,uDAAnB;AACA,SAAKD,UAAL,GAAkBD,UAAlB;AACH;;AACKG,EAAAA,YAAY,GAAG;AAAA;;AAAA;AACjB,UAAIC,UAAU,GAAG,IAAjB;;AACA,UAAI;AACAA,QAAAA,UAAU,SAAS,KAAI,CAACL,UAAL,CAAgBM,GAAhB,CAAoB,KAAI,CAACH,WAAzB,EAAsCI,SAAtC,EAAnB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBJ,UAAU,CAACK,KAAX,CAAiBC,QAAjB,EAAtB,GAAoD,SAAhE;AACH,OAHD,CAIA,OAAOC,mBAAP,EAA4B;AACxBP,QAAAA,UAAU,GAAG,EAAb;AACAA,QAAAA,UAAU,CAACQ,OAAX,GAAqB,EAArB;;AACA,YAAID,mBAAmB,YAAYjB,iBAAnC,EAAsD;AAClD,cAAImB,uBAAuB,GAAGF,mBAA9B;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAY,gCAAgC,KAAI,CAACN,WAArC,GAAmD,IAAnD,GAA0DW,uBAAuB,CAACC,OAA9F;AACH;AACJ;;AACD,aAAOV,UAAU,CAACQ,OAAlB;AAdiB;AAepB;;AAtByB;;AAwB9Bf,gBAAgB,CAACkB,IAAjB,GAAwB,SAASC,wBAAT,CAAkCC,CAAlC,EAAqC;AAAE,SAAO,KAAKA,CAAC,IAAIpB,gBAAV,EAA4BF,EAAE,CAACuB,QAAH,CAAYtB,EAAE,CAACuB,UAAf,CAA5B,EAAwDxB,EAAE,CAACuB,QAAH,CAAY,UAAZ,CAAxD,CAAP;AAA0F,CAAzJ;;AACArB,gBAAgB,CAACuB,KAAjB,GAAyB,aAAczB,EAAE,CAAC0B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEzB,gBAAT;AAA2B0B,EAAAA,OAAO,EAAE1B,gBAAgB,CAACkB,IAArD;AAA2DS,EAAAA,UAAU,EAAE;AAAvE,CAAtB,CAAvC;AACA,OAAO,MAAMC,KAAN,CAAY;AACf3B,EAAAA,WAAW,GAAG;AACV,SAAK4B,EAAL,GAAU,CAAV;AACA,SAAKC,GAAL,GAAW,EAAX;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,iBAAL,GAAyB,EAAzB;AACH;;AAPc;AASnB,OAAO,MAAMC,gBAAN,CAAuB;AAC1BjC,EAAAA,WAAW,GAAG;AACV,SAAKW,KAAL,GAAa,CAAb;AACA,SAAKuB,MAAL,GAAc,EAAd;AACH;;AAJyB","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class DonutShopService {\r\n    constructor(httpClient, newBaseUrl) {\r\n        this.httpClient = httpClient;\r\n        this.aspBaseUrl = \"\";\r\n        this.donutApiUrl = \"https://grandcircusco.github.io/demo-apis/donuts.json\";\r\n        this.aspBaseUrl = newBaseUrl;\r\n    }\r\n    async getDonutList() {\r\n        let callResult = null;\r\n        try {\r\n            callResult = await this.httpClient.get(this.donutApiUrl).toPromise();\r\n            console.log('Service received ' + callResult.count.toString() + 'donuts.');\r\n        }\r\n        catch (unexpectedException) {\r\n            callResult = [];\r\n            callResult.results = [];\r\n            if (unexpectedException instanceof HttpErrorResponse) {\r\n                let unexpectedExceptionHttp = unexpectedException;\r\n                console.log('Error sending http request ' + this.donutApiUrl + ': ' + unexpectedExceptionHttp.message);\r\n            }\r\n        }\r\n        return callResult.results;\r\n    }\r\n}\r\nDonutShopService.ɵfac = function DonutShopService_Factory(t) { return new (t || DonutShopService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL')); };\r\nDonutShopService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DonutShopService, factory: DonutShopService.ɵfac, providedIn: 'root' });\r\nexport class Donut {\r\n    constructor() {\r\n        this.id = 0;\r\n        this.ref = \"\";\r\n        this.name = \"\";\r\n        this.photo = \"\";\r\n        this.photo_attribution = \"\";\r\n    }\r\n}\r\nexport class DonutApiResponse {\r\n    constructor() {\r\n        this.count = 0;\r\n        this.result = [];\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}